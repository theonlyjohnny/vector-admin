# Setup base image
FROM ubuntu:jammy-20230522 AS base

# Build arguments
ARG ARG_UID=1000
ARG ARG_GID=1000
ARG NODE_MAJOR=20

# Install system dependencies


RUN DEBIAN_FRONTEND=noninteractive apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
      ca-certificates curl gnupg

RUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list

RUN DEBIAN_FRONTEND=noninteractive apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
        libgfortran5 python3 python3-pip tzdata netcat \
        libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 \
        libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libx11-6 libx11-xcb1 libxcb1 \
        libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 \
        libxss1 libxtst6 fonts-liberation libappindicator1 libnss3 lsb-release \
        xdg-utils nodejs && \
    curl -LO https://github.com/yarnpkg/yarn/releases/download/v1.22.19/yarn_1.22.19_all.deb \
        && dpkg -i yarn_1.22.19_all.deb \
        && rm yarn_1.22.19_all.deb && \
    curl -LO https://github.com/jgm/pandoc/releases/download/3.1.3/pandoc-3.1.3-1-amd64.deb \
        && dpkg -i pandoc-3.1.3-1-amd64.deb \
        && rm pandoc-3.1.3-1-amd64.deb && \
    rm -rf /var/lib/apt/lists/* /usr/share/icons && \
    dpkg-reconfigure -f noninteractive tzdata && \
    python3 -m pip install --no-cache-dir virtualenv

# Create a group and user with specific UID and GID
RUN groupadd -g $ARG_GID anythingllm && \
    useradd -u $ARG_UID -m -d /app -s /bin/bash -g anythingllm anythingllm && \
    mkdir -p /app/frontend/ /app/backend/ /app/workers/ /app/document-processor/ && chown -R anythingllm:anythingllm /app

# Copy docker helper scripts
COPY ./docker/docker-entrypoint.sh /usr/local/bin/
COPY ./docker/docker-healthcheck.sh /usr/local/bin/

# Ensure the scripts are executable
RUN chmod +x /usr/local/bin/docker-entrypoint.sh && \
    chmod +x /usr/local/bin/docker-healthcheck.sh

USER anythingllm

WORKDIR /app

# Install frontend dependencies
FROM base as frontend-deps
COPY ./frontend/package.json ./frontend/yarn.lock ./frontend/
RUN cd ./frontend/ && yarn install && yarn cache clean

# Build the frontend
FROM frontend-deps as build-stage
RUN whoami
COPY ./frontend/ ./frontend/
RUN stat ./frontend/*
RUN cd ./frontend/ && yarn build && yarn cache clean

# Install server dependencies
FROM base as server-deps
COPY ./backend/package.json ./backend/yarn.lock ./backend/
RUN cd ./backend/ && yarn install --production && yarn cache clean

# Setup the server
FROM server-deps as production-stage
COPY ./backend/ ./backend/ 

# Copy built static frontend files to the server public directory
COPY --from=build-stage /app/frontend/dist ./backend/public

# Copy worker source files 
COPY ./workers/ ./workers/
USER root
RUN chown -R anythingllm:anythingllm ./workers
USER anythingllm

# Install worker dependencies
RUN cd /app/workers && \
    yarn install --production && \
    yarn cache clean && \
    yarn add global inngest-cli

# # Copy the document-processor
COPY ./document-processor/ ./document-processor/

# # Install document-processor dependencies
RUN cd /app/document-processor && \
    python3 -m virtualenv v-env && \
    . v-env/bin/activate && \
    pip install --no-cache-dir -r requirements.txt

# Create placeholder database files from .placeholderdb files in /storage.
USER root
COPY ./backend/storage/job_queue.placeholderdb ./backend/storage/job_queue.db
COPY ./backend/storage/vdbms.placeholderdb ./backend/storage/vdbms.db
RUN chown -R anythingllm:anythingllm ./backend/storage ./document-processor
USER anythingllm

# Setup the environment
ENV NODE_ENV=production
ENV PATH=/app/document-processor/v-env/bin:$PATH

# Expose the server port
EXPOSE 3001
EXPOSE 3355
EXPOSE 8288

# Setup the healthcheck
HEALTHCHECK --interval=1m --timeout=10s --start-period=1m \
  CMD /bin/bash /usr/local/bin/docker-healthcheck.sh || exit 1

# Run the server
ENTRYPOINT ["/bin/bash", "/usr/local/bin/docker-entrypoint.sh"]
